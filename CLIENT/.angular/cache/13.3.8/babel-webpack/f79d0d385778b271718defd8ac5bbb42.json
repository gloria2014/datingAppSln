{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\Gloria\\\\Desktop\\\\Udemy\\\\local_DatingApp\\\\CLIENT\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { HubConnectionBuilder } from '@microsoft/signalr';\nimport { BehaviorSubject, take } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { getPaginatedResult, getPaginationHeaders } from './paginationHelper';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class MessageService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = environment.apiUrl;\n    this.hubUrl = environment.hubUrl;\n    this.messageThreadSource = new BehaviorSubject([]);\n    this.messageThread$ = this.messageThreadSource.asObservable();\n  }\n\n  getMessages(pageNumber, pageSize, container) {\n    console.log('message.sesrvice.ts -> pageNumber : ' + pageNumber, 'pageSize : ' + pageSize);\n    let params = getPaginationHeaders(pageNumber, pageSize);\n    params = params.append('Container', container);\n    return getPaginatedResult(this.baseUrl + 'messages', params, this.http);\n  }\n\n  getMessageThread(username) {\n    console.log('username :' + username);\n    return this.http.get(this.baseUrl + 'messages/thread/' + username);\n  }\n\n  sendMessage(username, content) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return _this.hubConnection.invoke('SendMessage', {\n        recipientUsername: username,\n        content\n      }).catch(error => console.log('error ::: ' + error));\n    })();\n  }\n\n  deleteMessage(id) {\n    return this.http.delete(this.baseUrl + 'messages/' + id);\n  }\n  /* class 230 maneja las sesiones con SignalR / Hub */\n\n\n  createHubConnection(usuario, anotherUser) {\n    this.hubConnection = new HubConnectionBuilder().withUrl(this.hubUrl + 'message?user=' + anotherUser, {\n      accessTokenFactory: () => usuario.token\n    }).withAutomaticReconnect().build();\n    this.hubConnection.start().catch(error => console.log(error));\n    this.hubConnection.on('ReceiveMessageThread', messages => {\n      this.messageThreadSource.next(messages);\n    });\n    this.hubConnection.on('NewMessage', message => {\n      this.messageThread$.pipe(take(1)).subscribe(messages => {\n        this.messageThreadSource.next([...messages, message]);\n      });\n    });\n    this.hubConnection.on('UpdatedGroup', group => {\n      if (group.connections.some(x => x.username === anotherUser)) {\n        this.messageThread$.pipe(take(1)).subscribe({\n          next: messages => {\n            messages.forEach(message => {\n              if (!message.dateRead) {\n                message.dateRead = new Date(Date.now());\n              }\n            });\n            this.messageThreadSource.next([...messages]);\n          }\n        });\n      }\n    });\n  }\n\n  stopHubConnection() {\n    if (this.hubConnection) {\n      //this.messageThreadSource.next([]);\n      this.hubConnection.stop();\n    }\n  }\n\n}\n\nMessageService.ɵfac = function MessageService_Factory(t) {\n  return new (t || MessageService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nMessageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MessageService,\n  factory: MessageService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/Gloria/Desktop/Udemy/local_DatingApp/CLIENT/src/app/_services/message.service.ts"],"names":["HubConnectionBuilder","BehaviorSubject","take","environment","getPaginatedResult","getPaginationHeaders","i0","i1","MessageService","constructor","http","baseUrl","apiUrl","hubUrl","messageThreadSource","messageThread$","asObservable","getMessages","pageNumber","pageSize","container","console","log","params","append","getMessageThread","username","get","sendMessage","content","hubConnection","invoke","recipientUsername","catch","error","deleteMessage","id","delete","createHubConnection","usuario","anotherUser","withUrl","accessTokenFactory","token","withAutomaticReconnect","build","start","on","messages","next","message","pipe","subscribe","group","connections","some","x","forEach","dateRead","Date","now","stopHubConnection","stop","ɵfac","MessageService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","factory","providedIn"],"mappings":"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","sourcesContent":["import { HubConnectionBuilder } from '@microsoft/signalr';\r\nimport { BehaviorSubject, take } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\nimport { getPaginatedResult, getPaginationHeaders } from './paginationHelper';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class MessageService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        this.baseUrl = environment.apiUrl;\r\n        this.hubUrl = environment.hubUrl;\r\n        this.messageThreadSource = new BehaviorSubject([]);\r\n        this.messageThread$ = this.messageThreadSource.asObservable();\r\n    }\r\n    getMessages(pageNumber, pageSize, container) {\r\n        console.log('message.sesrvice.ts -> pageNumber : ' + pageNumber, 'pageSize : ' + pageSize);\r\n        let params = getPaginationHeaders(pageNumber, pageSize);\r\n        params = params.append('Container', container);\r\n        return getPaginatedResult(this.baseUrl + 'messages', params, this.http);\r\n    }\r\n    getMessageThread(username) {\r\n        console.log('username :' + username);\r\n        return this.http.get(this.baseUrl + 'messages/thread/' + username);\r\n    }\r\n    async sendMessage(username, content) {\r\n        return this.hubConnection.invoke('SendMessage', { recipientUsername: username, content })\r\n            .catch(error => console.log('error ::: ' + error));\r\n    }\r\n    deleteMessage(id) {\r\n        return this.http.delete(this.baseUrl + 'messages/' + id);\r\n    }\r\n    /* class 230 maneja las sesiones con SignalR / Hub */\r\n    createHubConnection(usuario, anotherUser) {\r\n        this.hubConnection = new HubConnectionBuilder()\r\n            .withUrl(this.hubUrl + 'message?user=' + anotherUser, {\r\n            accessTokenFactory: () => usuario.token\r\n        })\r\n            .withAutomaticReconnect()\r\n            .build();\r\n        this.hubConnection.start().catch(error => console.log(error));\r\n        this.hubConnection.on('ReceiveMessageThread', messages => {\r\n            this.messageThreadSource.next(messages);\r\n        });\r\n        this.hubConnection.on('NewMessage', message => {\r\n            this.messageThread$.pipe(take(1)).subscribe(messages => {\r\n                this.messageThreadSource.next([...messages, message]);\r\n            });\r\n        });\r\n        this.hubConnection.on('UpdatedGroup', (group) => {\r\n            if (group.connections.some(x => x.username === anotherUser)) {\r\n                this.messageThread$.pipe(take(1)).subscribe({\r\n                    next: messages => {\r\n                        messages.forEach(message => {\r\n                            if (!message.dateRead) {\r\n                                message.dateRead = new Date(Date.now());\r\n                            }\r\n                        });\r\n                        this.messageThreadSource.next([...messages]);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n    stopHubConnection() {\r\n        if (this.hubConnection) {\r\n            //this.messageThreadSource.next([]);\r\n            this.hubConnection.stop();\r\n        }\r\n    }\r\n}\r\nMessageService.ɵfac = function MessageService_Factory(t) { return new (t || MessageService)(i0.ɵɵinject(i1.HttpClient)); };\r\nMessageService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: MessageService, factory: MessageService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}